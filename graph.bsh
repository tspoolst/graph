#!/bin/bash

#[of]:comments
#[c]o/h
#[c]a/h
#[c]o/a
#[c]
#[c]
#[c]o / a = o * h = o
#[c]h   h   h   a   a
#[c]
#[c]a / o = a * h = a
#[c]h   h   h   o   o
#[c]
#[c]o / o = o * h = h
#[c]a   h   a   o   a
#[c]
#[c]a / a = a * h = h
#[c]o   h   o   a   o
#[c]
#[c]
#[c]1/o = h
#[c]  h   o
#[c]
#[c]1/a = h
#[c]  h   a
#[c]
#[c]o / a / o = o * h * h = 1 * h = 1 / a
#[c]h   h   h   h   a   o       a       h
#[cf]

#[of]:functions

#[of]:base
#[of]:function pause {
function pause {
  typeset a
  read -s -N 1 -s a
}
#[cf]
#[of]:function degrees_to_radions {
function degrees_to_radions {
  bc -l <<< "${1}/180*${gl_pi}"
}
#[cf]
#[of]:function radions_to_degrees {
function radions_to_degrees {
  bc -l <<< "${1}/${gl_pi}*180"
}
#[cf]
#[of]:function get_random {
function get_random {
  command printf '%.0f\n' $(bc -l <<< "${RANDOM}*${1}/32767")
}
#[cf]
#[cf]
#[of]:screen
#[of]:function setup_screen_core_functions {
function setup_screen_core_functions {
#[of]:  function clear {
if ${gl_screen_buffered} ; then
  function clear {
    typeset _y
    for ((_y=0;_y<=gl_height;_y++)) ; do
      eval "y${_y}=( \"\${gl_xb[@]}\" )"
    done
  }
else
  unset -f clear
fi
#[cf]
#[of]:  function echo {
if ${gl_screen_buffered} ; then
  function echo {
    typeset i m
    m="$(command echo "$@")"
    for ((i=0;i<${#m};i++)) ; do
      eval "y${gl_position[1]}[$((gl_position[0]))]=\"\${m:${i}:1}\""
      ((gl_position[0]+=1))
    done
  }
else
  unset -f echo
fi
#[cf]
#[of]:  function printf {
if ${gl_screen_buffered} ; then
  function printf {
    typeset i m
    m="$(command printf "$@")"
    for ((i=0;i<${#m};i++)) ; do
      eval "y${gl_position[1]}[$((gl_position[0]))]=\"\${m:${i}:1}\""
      ((gl_position[0]+=1))
    done
  }
else
  unset -f printf
fi
#[cf]
#[c]  
#[of]:  function screen_refresh {
if ${gl_screen_buffered} ; then
  function screen_refresh {
    typeset _y
    command clear
    (
      IFS=''
      for ((_y=0;_y<=gl_height;_y++)) ; do
        eval "command echo -en \"\${y${_y}[*]}\""
      done
    )
  }
else
  function screen_refresh {
    :
  }
fi
#[cf]
#[of]:  function setcursorxy {
if ${gl_screen_buffered} ; then
  function setcursorxy {
    gl_position=( $1 $(( gl_height - $2 )) )
  }
else
  function setcursorxy {
    typeset _x _y
    _x=$(( $1 + 1))
    _y=$(( gl_height +1 - $2 ))
    echo -en "\\033[${_y};${_x}H"
  }
fi
#[cf]
#[c]  
#[of]:  function point_set {
if ${gl_screen_buffered} ; then
  function point_set {
    eval "y${gl_position[1]}[${gl_position[0]}]=\"\\\\033[7m \\\\033[0m\""
  }
else
  function point_set {
    echo -en "\\033[7m \\033[0m"
  }
fi
#[cf]
#[of]:  function point_clear {
if ${gl_screen_buffered} ; then
  function point_clear {
    eval "y${gl_position[1]}[${gl_position[0]}]=\"\\\\033[0m \""
  }
else
  function point_clear {
    echo -en "\\033[0m "
  }
fi
#[cf]

#[of]:  function screen_save
if ${gl_screen_buffered} ; then
  function screen_save {
    typeset i
    for ((i=0;i<=gl_height;i++)) ; do
      eval "ym${i}=( \"\${y${i}[@]}\" )"
    done
  }
else
  function screen_save {
    :
  }
fi
#[cf]
#[of]:  function screen_restore
if ${gl_screen_buffered} ; then
  function screen_restore {
    typeset i
    for ((i=0;i<=gl_height;i++)) ; do
      eval "y${i}=( \"\${ym${i}[@]}\" )"
    done
  }
else
  function screen_restore {
    :
  }
fi
#[cf]

}
#[cf]
#[c]
#[of]:function calcscreensize {
function calcscreensize {
  set -- $(stty size 2>/dev/null)
  gl_height=$(($1-1))
  gl_width=$(($2-1))
  [[ -z "${gl_height}" ]] && {
    gl_height=24
    gl_width=80
  }
}
#[cf]
#[c]
#[of]:function draw_line {
function draw_line {
  typeset x0 y0 x1 y1 dx sx dy sy err
  x0=$1
  y0=$2
  x1=$3
  y1=$4
 
  if (( x0 > x1 ))
  then
    (( dx = x0 - x1 ))
    (( sx = -1 ))
  else
    (( dx = x1 - x0 ))
    (( sx = 1 ))
  fi
 
  if (( y0 > y1 ))
  then
    (( dy = y0 - y1 ))
    (( sy = -1 ))
  else
    (( dy = y1 - y0 ))
    (( sy = 1 ))
  fi
 
  if (( dx > dy ))
  then
    (( err = dx ))
  else
    (( err = -dy ))
  fi
  (( err /= 2 ))
  (( e2 = 0 ))

  while :
  do
    setcursorxy ${x0} ${y0}
    point_set
    (( x0 == x1 && y0 == y1 )) && return
    (( e2 = err ))
    if (( e2 > -dx ))
    then
      (( err -= dy ))
      ((  x0 += sx ))
    fi
    if (( e2 < dy ))
    then
      (( err += dx ))
      ((  y0 += sy ))
    fi
  done
}
#[cf]
#[of]:function reset_last_xy {
function reset_last_xy {
  gl_lastx=""
  gl_lasty=""
}
#[cf]
#[c]
#[of]:function write_done {
function write_done {
  setcursorxy $((gl_width/2-5)) 3
  echo -n "                 "
  setcursorxy $((gl_width/2-5)) 3
  echo -n "done"
  setcursorxy 0 0
  pause
}
#[cf]
#[c]
#[of]:function draw_test_lines {
function draw_test_lines {
  typeset i xa ya xb yb _key
  while {
    clear
    setcursorxy 0 0
    echo ${gl_width} ${gl_height}
    for ((i=0;i<10;i++)) ; do
      xa=$(get_random ${gl_width})
      ya=$(get_random ${gl_height})
      xb=$(get_random ${gl_width})
      yb=$(get_random ${gl_height})
      setcursorxy 0 $((gl_height-i))
      echo -n $i draw_line ${xa} ${ya} ${xb} ${yb}
      draw_line ${xa} ${ya} ${xb} ${yb}
    done
    screen_refresh

      read -s -N 1 -r _key
    } ; do
#[of]:    case "${_key}" in
    case "${_key}" in
      $'\E')
        read -s -N 2 -r -t .1 _key || {
#[of]:          esc
#[c]        esc itself is just a single char
#[c]        if read timeout is reached the key must be esc
        clear
        break
#[cf]
        }
        ;;
#[of]:      q)
      q)
        clear
        break
        ;;
#[cf]
    esac
#[cf]
  done
}
#[cf]
#[of]:function draw_test_edges {
function draw_test_edges {
  clear

  setcursorxy 0 2
  point_set
  setcursorxy 1 1
  point_set
  setcursorxy 2 0
  point_set

  setcursorxy 0 $((gl_height-2))
  point_set
  setcursorxy 1 $((gl_height-1))
  point_set
  setcursorxy 2 $((gl_height))
  point_set

  setcursorxy $((gl_width)) 2
  point_set
  setcursorxy $((gl_width-1)) 1
  point_set
  setcursorxy $((gl_width-2)) 0
  point_set

  setcursorxy $((gl_width)) $((gl_height-2))
  point_set
  setcursorxy $((gl_width-1)) $((gl_height-1))
  point_set
  setcursorxy $((gl_width-2)) $((gl_height))
  point_set

  for ((_y=0;_y<=gl_height;_y++)) ; do
    setcursorxy $((gl_width/2)) ${_y}
    point_set
#[c]    echo -n " ${_y}"
  done
  screen_refresh
}
#[cf]
#[cf]
#[of]:coordinate system plotters
#[of]:function adjust_aspect {
function adjust_aspect {
gl_range_x=50
gl_range_y=50
  while {
      clear

      setcursorxy $((gl_width/2-5)) $((gl_height-3))
      echo -n "         "
      setcursorxy $((gl_width/2-5)) $((gl_height-3))
      printf "(%0.2f)" $(bc -l <<< "${gl_aspect}/100")

      graph_x_on_cartesian
      read -s -N 1 -r _key
    } ; do
    case "${_key}" in
      $'\E')
        read -s -N 2 -r -t 1 _key || {
#[of]:          esc
#[c]        esc itself is just a single char
#[c]        if read timeout is reached the key must be esc
        clear
        break
#[cf]
        }
        case "${_key}" in
#[of]:          up)
            '[A')
              ((gl_aspect++))
              ;;
#[cf]
#[of]:          down)
            '[B')
              ((gl_aspect--))
              ;;
#[cf]
        esac
        ;;
#[of]:      q)
      q)
        clear
        break
        ;;
#[cf]
    esac
  done
}
#[cf]
#[of]:function plot_cartesian {
function plot_cartesian {
  typeset _x _y

  _x=$(command printf "%.0f\n" $1)
  _y=$(command printf "%.0f\n" $2)
  
  _x=$(( gl_width / 2 + _x * gl_width * gl_aspect / gl_range_x / 2 / 100 ))
  _y=$(( gl_height / 2 + _y * gl_height / gl_range_y / 2 ))

  if [[ -z "${gl_lastx}" ]] ; then
    gl_lastx=${_x}
    gl_lasty=${_y}
  else
    draw_line ${gl_lastx} ${gl_lasty} ${_x} ${_y}
    gl_lastx=${_x}
    gl_lasty=${_y}
  fi
}
#[cf]
#[of]:function plot_polar {
function plot_polar {
  typeset lc_angle lc_radius _x _y
  lc_angle=$1
  lc_radius=$2
  _x=$(bc -l <<< "c(${lc_angle})*${lc_radius}")
  _y=$(bc -l <<< "s(${lc_angle})*${lc_radius}")
  plot_cartesian ${_x} ${_y}  
}
#[cf]
#[cf]
#[of]:graph functions
#[of]:function graph_x_on_cartesian {
function graph_x_on_cartesian {
  clear

  typeset i
  i=45
  reset_last_xy
  plot_cartesian 0 0
  plot_cartesian ${i} ${i}
  reset_last_xy
  plot_cartesian 0 0
  plot_cartesian -${i} ${i}
  reset_last_xy
  plot_cartesian 0 0
  plot_cartesian -${i} -${i}
  reset_last_xy
  plot_cartesian 0 0
  plot_cartesian ${i} -${i}
  screen_refresh
}
#[cf]
#[of]:function graph_polar_line {
function graph_polar_line {
  clear

  typeset lc_step lc_angle_degrees lc_angle_degrees_shifted lc_angle_radians lc_radius
  lc_step=.5

  gl_range_x=50
  gl_range_y=50

  plot_cartesian -${gl_range_x} 0
  plot_cartesian ${gl_range_x} 0
  reset_last_xy
  plot_cartesian 0 -${gl_range_y}
  plot_cartesian  0 ${gl_range_y}
  reset_last_xy

  lc_angle_degrees=-${lc_step}
  while { lc_angle_degrees=$(bc -l <<< "${lc_angle_degrees}+${lc_step}");[[ $(bc -l <<< "${lc_angle_degrees} <=180") == 1 ]]; } ; do
    typeset lc_angle
    lc_angle_degrees_shifted=$(bc -l <<< "${lc_angle_degrees} - 90")
    lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
    lc_radius=$(bc -l <<< "1 / c( $(degrees_to_radions ${lc_angle_degrees_shifted}) ) * 10")

#[c]    echo "${lc_angle_degrees}, ${lc_angle_degrees_shifted}, ${lc_radius}"

    setcursorxy $((gl_width/2-5)) $((gl_height -2))
    echo -n "                                                      "
    setcursorxy $((gl_width/2-5)) $((gl_height -2))
    echo -n "${lc_angle_degrees}, ${lc_angle_radians}, ${lc_radius}"

    [[ $(bc -l <<< "${lc_radius} > ${gl_range_x}") == 1 ]] && continue
    plot_polar ${lc_angle_radians} ${lc_radius}
  done

  reset_last_xy
  screen_refresh
}
#[cf]
#[of]:function graph_sinwave {
function graph_sinwave {
  typeset lc_angle_degrees lc_angle_degrees_shifted lc_angle_radians lc_radius
  typeset lc_frequency lc_magnitude lc_graphtype lc_step
  lc_frequency=1
  lc_magnitude=40
  lc_step=10
  lc_graphtype=1

  gl_range_x=100
  gl_range_y=50

  while {
      clear

      setcursorxy $((gl_width/2-5)) $((gl_height-1))
      echo -n "          "
      setcursorxy $((gl_width/2-5)) $((gl_height-1))
      echo -n "(${lc_frequency}, ${lc_step})"
      
      reset_last_xy
  #set -xv
      lc_angle_degrees=-${lc_step}
      while { lc_angle_degrees=$(bc -l <<< "${lc_angle_degrees}+${lc_step}");[[ $(bc -l <<< "${lc_angle_degrees} <=360") == 1 ]]; } ; do
        lc_angle_degrees_shifted=$(bc -l <<< "${lc_angle_degrees}-180")
        lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
        lc_radius=$(bc -l <<< "s(${lc_angle_radians}*${lc_frequency})*${lc_magnitude}")
    
        setcursorxy $((gl_width/2-5)) $((gl_height-2))
        echo -n "                          "
        setcursorxy $((gl_width/2-5)) $((gl_height-2))
        if ((lc_graphtype==1)) ; then
          printf "(%.3f,%.3f)" ${lc_angle_degrees_shifted} ${lc_radius}
          plot_cartesian ${lc_angle_degrees_shifted} ${lc_radius}
        else
          printf "(%.3f  %.3f,%.3f)" ${lc_angle_radians} ${lc_angle_degrees} ${lc_radius}
          plot_polar ${lc_angle_radians} ${lc_radius}
        fi
#[c]        pause
      done
      screen_refresh

      read -s -N 1 -r _key
    } ; do
#[of]:    case "${_key}" in
    case "${_key}" in
      $'\E')
        read -s -N 2 -r -t .1 _key || {
#[of]:          esc
#[c]        esc itself is just a single char
#[c]        if read timeout is reached the key must be esc
        clear
        break
#[cf]
        }
        case "${_key}" in
#[of]:          up)
            '[A')
              ((lc_frequency++))
              ;;
#[cf]
#[of]:          down)
            '[B')
              ((lc_frequency--))
              ;;
#[cf]
#[of]:          left)
            '[D')
              if [[ $(bc -l <<< "${lc_step} > 1") == 1 ]] ; then
                ((lc_step--))
              elif [[ $(bc -l <<< "${lc_step} > .1") == 1 ]] ; then
                lc_step=$(bc -l <<< "${lc_step}-.1")
              fi
              ;;
#[cf]
#[of]:          right)
            '[C')
              if [[ $(bc -l <<< "${lc_step} >= 1") == 1 ]] ; then
                lc_step=$(command printf "%.0f\n" ${lc_step})
                ((lc_step++))
              else
                lc_step=$(bc -l <<< "${lc_step}+.1")
              fi
              ;;
#[cf]
        esac
        ;;
#[of]:      g)
      g)
        if ((lc_graphtype==1)) ; then
          lc_graphtype=2
          gl_range_x=50
          gl_range_y=50
        else
          lc_graphtype=1
          gl_range_x=100
          gl_range_y=50
        fi
        ;;
#[cf]
#[of]:      q)
      q)
        clear
        break
        ;;
#[cf]
    esac
#[cf]
  done
}
#[cf]
#[of]:function graph_circle_triangle {
function graph_circle_triangle {
  typeset lc_angle_degrees lc_angle_degrees_shifted lc_angle_radians lc_radius
  typeset lc_frequency lc_magnitude lc_graphtype lc_step
  
  typeset _x _y lc_lastx lc_lasty
  typeset lc_current_angle

  typeset lc_current_buffered_state
  lc_current_buffered_state=${gl_screen_buffered}

  gl_screen_buffered=true
  setup_screen_core_functions
  
  
  lc_frequency=1
  lc_magnitude=44
  lc_step=10
  lc_graphtype=1

  gl_range_x=50
  gl_range_y=50


  clear
  reset_last_xy
  lc_angle_degrees=-${lc_step}
  while { lc_angle_degrees=$(bc -l <<< "${lc_angle_degrees}+${lc_step}");[[ $(bc -l <<< "${lc_angle_degrees} <=360") == 1 ]]; } ; do
    
    lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
    plot_polar ${lc_angle_radians} ${lc_magnitude}
  done
  screen_save


  lc_current_angle=40
  while {
      clear
      screen_restore
      screen_refresh

      reset_last_xy
      lc_angle_degrees=-${lc_step}
      while { lc_angle_degrees=$(bc -l <<< "${lc_angle_degrees}+${lc_step}");[[ $(bc -l <<< "${lc_angle_degrees} <=360") == 1 ]]; } ; do
        
        lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
        plot_polar ${lc_angle_radians} ${lc_magnitude}
      done

      reset_last_xy
      lc_angle_radians=$(degrees_to_radions ${lc_current_angle})
      _x=$(bc -l <<< "c(${lc_angle_radians})*${lc_magnitude}")
      _y=$(bc -l <<< "s(${lc_angle_radians})*${lc_magnitude}")
      plot_cartesian 0 0
      plot_cartesian ${_x} ${_y}
      plot_cartesian ${_x} 0
      plot_cartesian 0 0

      setcursorxy $((gl_width/2-5)) $((gl_height-1))
      echo -n "                          "
      setcursorxy $((gl_width/2-5)) $((gl_height-1))
      printf "(%.3f, %.3f, %.3f)" ${lc_current_angle} ${_x} ${_y}

      screen_refresh

      read -s -N 1 -r _key
    } ; do
#[of]:    case "${_key}" in
    case "${_key}" in
      $'\E')
        read -s -N 2 -r -t .1 _key || {
#[of]:          esc
#[c]        esc itself is just a single char
#[c]        if read timeout is reached the key must be esc
        clear
        break
#[cf]
        }
        case "${_key}" in
#[of]:          left)
            '[D')
              if [[ ${lc_current_angle} != 350 ]] ; then
                ((lc_current_angle+=10))
              else
                lc_current_angle=0
              fi
              ;;
#[cf]
#[of]:          right)
            '[C')
              if [[ ${lc_current_angle} != 0 ]] ; then
                ((lc_current_angle-=10))
              else
                lc_current_angle=350
              fi
              ;;
#[cf]
        esac
        ;;
#[of]:      q)
      q)
        clear
        break
        ;;
#[cf]
    esac
#[cf]
  done
  
  gl_screen_buffered=${lc_current_buffered_state}
  setup_screen_core_functions
}
#[cf]
#[of]:function graph_square {
function graph_square {
  clear

  gl_range_x=50
  gl_range_y=50

  plot_cartesian -20 20
  plot_cartesian  20 20
  plot_cartesian  20 -20
  plot_cartesian -20 -20
  plot_cartesian -20 20
  reset_last_xy
  screen_refresh
}
#[cf]
#[of]:function graph_triangle {
function graph_triangle {
  clear

  gl_range_x=50
  gl_range_y=50

  gl_triangle_height=$(bc -l <<< "s( $(degrees_to_radions 60) )*40")
  plot_cartesian -20 $(bc -l <<< "-${gl_triangle_height}/2")
  plot_cartesian 20 $(bc -l <<< "-${gl_triangle_height}/2")
  plot_cartesian 0 $(bc -l <<< "${gl_triangle_height}-${gl_triangle_height}/2")
  plot_cartesian -20 $(bc -l <<< "-${gl_triangle_height}/2")
  reset_last_xy
  screen_refresh
}
#[cf]
#[cf]
#[cf]
#[of]:setup vars
calcscreensize
gl_position=( 0 0 )
gl_range_x=100
gl_range_y=50

gl_lastx=""
gl_lasty=""

gl_aspect=50
gl_pi=$(command echo "scale=10; 4*a(1)" | bc -l)

gl_screen_buffered=false

#[of]:create blank row
for ((_x=0;_x<=gl_width;_x++)) ; do
  gl_xb+=(' ')
done
#[cf]


#[cf]
#[of]:main
setup_screen_core_functions

if [[ "$1" == "-a" ]] ; then
  adjust_aspect
  exit
fi

draw_test_edges
write_done

draw_test_lines

graph_triangle
write_done

graph_square
write_done

graph_polar_line
write_done

graph_circle_triangle

graph_sinwave

clear
#[cf]
# vim:number:tabstop=2:shiftwidth=2:autoindent:foldmethod=marker:foldlevel=0:foldmarker=#[of],#[cf]
