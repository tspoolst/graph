#!/bin/bash

#[of]:comments
#[c]o/h
#[c]a/h
#[c]o/a
#[c]
#[c]
#[c]o / a = o * h = o
#[c]h   h   h   a   a
#[c]
#[c]a / o = a * h = a
#[c]h   h   h   o   o
#[c]
#[c]o / o = o * h = h
#[c]a   h   a   o   a
#[c]
#[c]a / a = a * h = h
#[c]o   h   o   a   o
#[c]
#[c]
#[c]1/o = h
#[c]  h   o
#[c]
#[c]1/a = h
#[c]  h   a
#[c]
#[c]o / a / o = o * h * h = 1 * h = 1 / a
#[c]h   h   h   h   a   o       a       h
#[cf]

#[of]:functions
#[of]:base
#[of]:function pause {
function pause {
  typeset _key
  typeset lc_timeout lc_message lc_errorlevel
  lc_errorlevel=0
  isnum "$1" && {
    lc_timeout="$1"
    shift
  }
  lc_message="${1:-press any key to continue}"
  
  mouseEnable

  if ${gl_pause:-true} ; then
    if [[ -z "${lc_timeout}" ]] ; then
      echo -n "${lc_message}"
      while read -s -n 1 -r _key ; do
        pauseHandleKey "${_key}" && break
      done
    else
      echo -n "${lc_message} - ${lc_timeout}"
      for ((b=${lc_timeout};b>0;b--)) ; do
        ((b>9)) && echo -ne "\b\b${b}" || echo -ne "\b\b ${b}"
        if read -s -t 1 -n 1 -r _key ; then
          pauseHandleKey "${_key}" && {
            lc_errorlevel=0
            break
          }
        else
          lc_errorlevel=1
        fi
      done
    fi
  fi
  mouseDisable
  return ${lc_errorlevel}
}
#[of]:function pauseHandleKey {
function pauseHandleKey {
  typeset _key _mouse _mouseEvent
  _key="$1"
  case "${_key}" in
#[of]:    escaped keys
        $'\E')
          read -s -n 2 -r -t 1 _key || {
#[of]:            esc
#[c]            esc itself is just a single char
#[c]            if read timeout is reached the key must be esc
            return 0
#[cf]
          }
          case "${_key}" in
#[of]:            mouse
            '[<')
              _mouse=""
              _mouseEvent=( _ _ _ _ _ )
              while read -s -n 1 -r _key ; do
                _mouse="${_mouse}${_key}"
                [[ "${_key}" =~ (M|m) ]] && break
              done

              [[ -z "${_mouse%%*M}" ]] && _mouseEvent[4]="down"
              [[ -z "${_mouse%%*m}" ]] && _mouseEvent[4]="up"
              _mouse="${_mouse:0:-1}"
              _mouseEvent=( ${_mouse//\;/ } _ ${_mouseEvent[4]} )

              [[ "${_mouseEvent[0]}" =~ (1) && "${_mouseEvent[4]}" == "down" ]] && {
                if read -s -n 1 -r _key ; then
                  pauseHandleKey "${_key}" && return 0
                else
                  return 1
                fi
              }

              [[ "${_mouseEvent[0]}" =~ (0|1|2) && "${_mouseEvent[4]}" == "up" ]]
              ;;
#[cf]
#[of]:            *)
            *)
              return 0
              ;;
#[cf]
          esac
          ;;
#[cf]
#[of]:    *)
        *)
          return 0
          ;;
#[cf]
  esac
}
#[cf]
#[cf]
#[of]:function askyn {
function askyn {
  typeset _key _return
  mouseEnable
  echo -n "${1:-continue}? [y/n] "
  while true ; do
    read -s -n 1 -r _key
    case "${_key}" in
#[of]:      escaped keys
      $'\E')
        read -s -n 2 -r -t 1 _key || {
#[of]:          esc
#[c]            esc itself is just a single char
#[c]            if read timeout is reached the key must be esc
            continue
#[cf]
        }
        case "${_key}" in
#[of]:          mouse
            '[<')
              _mouse=""
              _mouseEvent=( _ _ _ _ _ )
              while read -s -n 1 -r _key ; do
                _mouse="${_mouse}${_key}"
                [[ "${_key}" =~ (M|m) ]] && break
              done
              [[ -z "${_mouse%%*M}" ]] && _mouseEvent[4]="down"
              [[ -z "${_mouse%%*m}" ]] && _mouseEvent[4]="up"
              _mouse="${_mouse:0:-1}"
              _mouseEvent=( ${_mouse//\;/ } _ ${_mouseEvent[4]} )

              [[ "${_mouseEvent[0]}" =~ (0) && "${_mouseEvent[4]}" == "up" ]] && { _return=0;break; }
              [[ "${_mouseEvent[0]}" =~ (2) && "${_mouseEvent[4]}" == "up" ]] && { _return=1;break; }
              ;;
#[cf]
        esac
        ;;
#[cf]
      y) _return=0;break;;
      *) _return=1;break;;
    esac
  done
  echo
  mouseDisable
  return ${_return}
}
#[cf]
#[c]
#[of]:function isnum {
function isnum {
#[of]:  usage
  if false ; then
    echo "Usage: isnum arg"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if arg is a number"
    echo "Examples:"
    echo '  "if isnum 50 ; then'
    echo '    echo is a number'
    echo '  else'
    echo '    echo is not a number'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isnum 50 ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
}
  function isnum {
    #set IFS to a sane value
    typeset IFS
    IFS=' 	
'
    if [[ "$1" == ?(+|-)+([0-9]) ]] ; then
     return 0
    fi
    return 1
  }
#[cf]
#[c]
#[of]:function mouseEnable {
function mouseEnable {
  stty -echo
  command echo -en "\e[?1000h\e[?1006h\e[?1015h"
}
#[cf]
#[of]:function mouseDisable {
function mouseDisable {
  stty echo
  command echo -en "\e[?1000l\e[?1006l\e[?1015l"
}
#[cf]
#[c]
#[of]:function degrees_to_radions {
function degrees_to_radions {
  bc -l <<< "${1}/180*${gl_pi}"
}
#[cf]
#[of]:function radions_to_degrees {
function radions_to_degrees {
  bc -l <<< "${1}/${gl_pi}*180"
}
#[cf]
#[of]:function get_random {
function get_random {
  command printf '%.0f\n' $(bc -l <<< "${RANDOM}*${1}/32767")
}
#[cf]
#[cf]
#[of]:screen
#[of]:function setup_screen_core_functions {
function setup_screen_core_functions {
#[of]:  function clear {
if ${gl_screen_buffered} ; then
  function clear {
    typeset _y
    for ((_y=0;_y<=gl_height;_y++)) ; do
      eval "y${_y}=( \"\${gl_xb[@]}\" )"
    done
  }
else
  unset -f clear
fi
#[cf]
#[of]:  function echo {
if ${gl_screen_buffered} ; then
  function echo {
    typeset i m
    m="$(command echo "$@")"
    for ((i=0;i<${#m};i++)) ; do
      eval "y${gl_position[1]}[$((gl_position[0]))]=\"\${m:${i}:1}\""
      ((gl_position[0]+=1))
    done
  }
else
  unset -f echo
fi
#[cf]
#[of]:  function printf {
if ${gl_screen_buffered} ; then
  function printf {
    typeset i m
    m="$(command printf "$@")"
    for ((i=0;i<${#m};i++)) ; do
      eval "y${gl_position[1]}[$((gl_position[0]))]=\"\${m:${i}:1}\""
      ((gl_position[0]+=1))
    done
  }
else
  unset -f printf
fi
#[cf]
  
#[of]:  function screen_refresh {
if ${gl_screen_buffered} ; then
  function screen_refresh {
    typeset _y
    command clear
    (
      IFS=''
      for ((_y=0;_y<=gl_height;_y++)) ; do
        eval "command echo -en \"\${y${_y}[*]}\""
      done
    )
  }
else
  function screen_refresh {
    :
  }
fi
#[cf]
#[of]:  function setcursorxy {
if ${gl_screen_buffered} ; then
  function setcursorxy {
    gl_position=( $1 $(( gl_height - $2 )) )
  }
else
  function setcursorxy {
    typeset _x _y
    _x=$(( $1 + 1))
    _y=$(( gl_height +1 - $2 ))
    echo -en "\\033[${_y};${_x}H"
  }
fi
#[cf]
  
#[of]:  function point_set {
if ${gl_screen_buffered} ; then
  function point_set {
    eval "y${gl_position[1]}[${gl_position[0]}]=\"\\\\033[7m \\\\033[0m\""
  }
else
  function point_set {
    echo -en "\\033[7m \\033[0m"
  }
fi
#[cf]
#[of]:  function point_clear {
if ${gl_screen_buffered} ; then
  function point_clear {
    eval "y${gl_position[1]}[${gl_position[0]}]=\"\\\\033[0m \""
  }
else
  function point_clear {
    echo -en "\\033[0m "
  }
fi
#[cf]

#[of]:  function screen_save
if ${gl_screen_buffered} ; then
  function screen_save {
    typeset i
    for ((i=0;i<=gl_height;i++)) ; do
      eval "ym${i}=( \"\${y${i}[@]}\" )"
    done
  }
else
  function screen_save {
    :
  }
fi
#[cf]
#[of]:  function screen_restore
if ${gl_screen_buffered} ; then
  function screen_restore {
    typeset i
    for ((i=0;i<=gl_height;i++)) ; do
      eval "y${i}=( \"\${ym${i}[@]}\" )"
    done
  }
else
  function screen_restore {
    :
  }
fi
#[cf]
}
#[cf]

#[of]:function calcscreensize {
function calcscreensize {
  set -- $(stty size 2>/dev/null)
  gl_height=$(($1-1))
  gl_width=$(($2-1))
  [[ -z "${gl_height}" ]] && {
    gl_height=24
    gl_width=80
  }
}
#[cf]

#[of]:function draw_line {
function draw_line {
  typeset x0 y0 x1 y1 dx sx dy sy err
  x0=$1
  y0=$2
  x1=$3
  y1=$4
 
  if (( x0 > x1 ))
  then
    (( dx = x0 - x1 ))
    (( sx = -1 ))
  else
    (( dx = x1 - x0 ))
    (( sx = 1 ))
  fi
 
  if (( y0 > y1 ))
  then
    (( dy = y0 - y1 ))
    (( sy = -1 ))
  else
    (( dy = y1 - y0 ))
    (( sy = 1 ))
  fi
 
  if (( dx > dy ))
  then
    (( err = dx ))
  else
    (( err = -dy ))
  fi
  (( err /= 2 ))
  (( e2 = 0 ))

  while :
  do
    setcursorxy ${x0} ${y0}
    point_set
    (( x0 == x1 && y0 == y1 )) && return
    (( e2 = err ))
    if (( e2 > -dx ))
    then
      (( err -= dy ))
      ((  x0 += sx ))
    fi
    if (( e2 < dy ))
    then
      (( err += dx ))
      ((  y0 += sy ))
    fi
  done
}
#[cf]
#[of]:function reset_last_xy {
function reset_last_xy {
  gl_lastx=""
  gl_lasty=""
}
#[cf]

#[of]:function write_done {
function write_done {
  setcursorxy $((gl_width/2-5)) 3
  echo -n "                 "
  setcursorxy $((gl_width/2-5)) 3
  echo -n "done"
  setcursorxy 0 0
  pause
}
#[cf]
#[of]:function write_pre-render {
function write_pre-render {
  setcursorxy $((gl_width/2-5)) 3
  echo -n "                 "
  setcursorxy $((gl_width/2-5)) 3
  echo -n "pre-render"
  setcursorxy 0 0
}
#[cf]

#[of]:function draw_test_lines {
function draw_test_lines {
  typeset i xa ya xb yb _key
  while {
    clear
    setcursorxy 0 0
    echo ${gl_width} ${gl_height}
    for ((i=0;i<10;i++)) ; do
      xa=$(get_random ${gl_width})
      ya=$(get_random ${gl_height})
      xb=$(get_random ${gl_width})
      yb=$(get_random ${gl_height})
      setcursorxy 0 $((gl_height-i))
      echo -n $i draw_line ${xa} ${ya} ${xb} ${yb}
      draw_line ${xa} ${ya} ${xb} ${yb}
    done
    screen_refresh

#[c]      read -s -N 1 -r _key
      askyn ""
    } ; do
#[of]:    case "${_key}" in
    case "${_key}" in
      $'\E')
        read -s -N 2 -r -t .1 _key || {
#[of]:          esc
#[c]        esc itself is just a single char
#[c]        if read timeout is reached the key must be esc
        clear
        break
#[cf]
        }
        ;;
#[of]:      q)
      q)
        clear
        break
        ;;
#[cf]
    esac
#[cf]
  done
}
#[cf]
#[of]:function draw_test_edges {
function draw_test_edges {
  clear

  setcursorxy 0 2
  point_set
  setcursorxy 1 1
  point_set
  setcursorxy 2 0
  point_set

  setcursorxy 0 $((gl_height-2))
  point_set
  setcursorxy 1 $((gl_height-1))
  point_set
  setcursorxy 2 $((gl_height))
  point_set

  setcursorxy $((gl_width)) 2
  point_set
  setcursorxy $((gl_width-1)) 1
  point_set
  setcursorxy $((gl_width-2)) 0
  point_set

  setcursorxy $((gl_width)) $((gl_height-2))
  point_set
  setcursorxy $((gl_width-1)) $((gl_height-1))
  point_set
  setcursorxy $((gl_width-2)) $((gl_height))
  point_set

  for ((_y=0;_y<=gl_height;_y++)) ; do
    setcursorxy $((gl_width/2)) ${_y}
    point_set
#[c]    echo -n " ${_y}"
  done
  screen_refresh
}
#[cf]

#[of]:function draw_tree {
function draw_tree {
  typeset xa ya xb yb lc_length lc_iterations lc_angle_degrees lc_angle_radians lc_angle_increment
  clear
  
  lc_rwidth=$(real_to_rel ${gl_width})
  lc_rheight=${gl_height}
  
  
  lc_length=$((lc_rheight/3))
  lc_angle_degrees=0
  lc_angle_increment=30
  lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
  lc_iterations=2

  xa=$((lc_rwidth/2))
  ya=0
  xb=$(command printf "%.0f\n" $(bc -l <<< "s(${lc_angle_radians})*${lc_length}+${xa}"))
  yb=$(command printf "%.0f\n" $(bc -l <<< "c(${lc_angle_radians})*${lc_length}+${ya}"))
#[c]  echo draw_line $(rel_to_real ${xa}) ${ya} $(rel_to_real ${xb}) ${yb}
  draw_line $(rel_to_real ${xa}) ${ya} $(rel_to_real ${xb}) ${yb}

  draw_tree_recurse ${xb} ${yb} ${lc_length} 60 ${lc_angle_increment} ${lc_iterations}

  setcursorxy 0 0

exit
  lc_angle_degrees=$((lc_angle_degrees+lc_angle_increment))
  lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
  lc_length=$((lc_length*3/4))

  xa=${xb}
  ya=${yb}
  xb=$(command printf "%.0f\n" $(bc -l <<< "s(${lc_angle_radians})*${lc_length}+${xa}"))
  yb=$(command printf "%.0f\n" $(bc -l <<< "c(${lc_angle_radians})*${lc_length}+${ya}"))
  draw_line $(rel_to_real ${xa}) ${ya} $(rel_to_real ${xb}) ${yb}
  lc_angle_degrees=$((lc_angle_degrees+lc_angle_increment))
  lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
  lc_length=$((lc_length*3/4))

  xa=${xb}
  ya=${yb}
  xb=$(command printf "%.0f\n" $(bc -l <<< "s(${lc_angle_radians})*${lc_length}+${xa}"))
  yb=$(command printf "%.0f\n" $(bc -l <<< "c(${lc_angle_radians})*${lc_length}+${ya}"))
  draw_line $(rel_to_real ${xa}) ${ya} $(rel_to_real ${xb}) ${yb}
  lc_angle_degrees=$((lc_angle_degrees+lc_angle_increment))
  lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
  lc_length=$((lc_length*3/4))

exit
  echo draw_line ${xa} ${ya} ${xb} ${yb}
  draw_line $(rel_to_real ${xa}) ${ya} $(rel_to_real ${xb}) ${yb}


  echo
#[c]  _x=$(command printf "%.0f\n" $1)
#[c]  _y=$(command printf "%.0f\n" $2)
#[c]  
#[c]  _x=$(( gl_width / 2 + _x * gl_width * gl_aspect / gl_range_x / 2 / 100 ))
#[c]  _y=$(( gl_height / 2 + _y * gl_height / gl_range_y / 2 ))

  echo
  echo $(( xb * gl_width * gl_aspect / gl_range_x / 100 ))
  echo draw_line ${xb} ${yb} $(( xb * gl_width * gl_aspect / gl_range_x / 2 / 100 )) $((yb+20))

#[c]  draw_line \
#[c]    ${xb} \
#[c]    ${yb} \
#[c]    $(command printf "%.0f\n" $(bc -l <<< "c(${lc_angle_radians})*${lc_length}*${gl_aspect}/2/100+${xb}")) \
#[c]    $(command printf "%.0f\n" $(bc -l <<< "s(${lc_angle_radians})*${lc_length}/2+${yb}"))
  echo $(bc -l <<< "c(${lc_angle_radians})") $(bc -l <<< "s(${lc_angle_radians})")

  screen_refresh

#[c]  10 REM PROMPT USER FOR ANGLE
#[c]  20 TEXT : HOME
#[c]  30 PRINT "I WILL DRAW YOU A TREE!"
#[c]  40 PRINT "ENTER AN ANGLE IN RADIANS"
#[c]  50 INPUT DA
#[c]  
#[c]  60 REM HIGH RESOLUTION GRAPHICS
#[c]  70 HGR
#[c]  80 HCOLOR = 3
#[c]  
#[c]  90 REM INITIAL VARIABLES
#[c]  100 SHRINK = 0.67
#[c]  110 A = 3.14159 * 0.5
#[c]  120 L = 50
#[c]  130 LEVEL = 0
#[c]  140 MAXLEV = 10
#[c]  150 X = 140 : Y = 159
#[c]  
#[c]  160 REM ARRAY FOR STACK OF TREE POSITIONS
#[c]  170 DIM XS(MAXLEV) : DIM YS(MAXLEV)
#[c]  
#[c]  180 REM START BRANCHING
#[c]  190 GOSUB 1000
#[c]  200 END
#[c]  
#[c]  1000 REM DRAW A SINGLE BRANCH!
#[c]
#[c]  1010 REM CALCULATE NEXT POINT
#[c]  1020 DX = L * COS(A)
#[c]  1030 DY = L * SIN(A)
#[c]  1040 NX = X + DX : NY = Y - DY
#[c]  
#[c]  1050 REM DRAW BRANCH
#[c]  1060 HPLOT X, Y TO NX, NY
#[c]  
#[c]  1070 REM SAVE POSITION
#[c]  1080 XS(LEVEL) = X : YS(LEVEL) = Y
#[c]  
#[c]  1090 REM NEXT BRANCH
#[c]  1100 X = NX : Y = NY
#[c]  1110 LEVEL = LEVEL + 1
#[c]  1120 A = A + DA
#[c]  1130 L = L * SHRINK
#[c]  1140 IF LEVEL < MAXLEV THEN GOSUB 1000
#[c]  
#[c]  1150 REM AND ANOTHER BRANCH
#[c]  1160 A = A - DA * 2
#[c]  1170 IF LEVEL < MAXLEV THEN GOSUB 1000
#[c]  
#[c]  1180 REM POP BACK
#[c]  1190 A = A + DA
#[c]  1200 L = L / SHRINK
#[c]  1210 LEVEL = LEVEL - 1
#[c]  1220 X = XS(LEVEL) : Y = YS(LEVEL)
#[c]  1230 RETURN
}
#[of]:function draw_tree_recurse {
function draw_tree_recurse {
#[c]  draw_tree_recurse ${xb} ${yb} ${lc_length} ${lc_angle_degrees} ${lc_angle_increment} ${lc_iterations}
#[c]
  typeset xa ya xb yb lc_length lc_iterations
  typeset lc_angle_degrees lc_angle_degrees_r lc_angle_degrees_l
  typeset lc_angle_radians_r lc_angle_radians_l
  typeset lc_angle_increment
  
  lc_iterations=$(($6-1))
  ((lc_iterations<=0)) && return

  xa=$1
  ya=$2
#[c]  xb=$(command printf "%.0f\n" $(bc -l <<< "s(${lc_angle_radians})*${lc_length}+${xa}"))
#[c]  yb=$(command printf "%.0f\n" $(bc -l <<< "c(${lc_angle_radians})*${lc_length}+${ya}"))
  lc_length=$3
  lc_angle_degrees=$4
  lc_angle_increment=$(($5))
  
#[c]  lc_angle_degrees=$((lc_angle_degrees+lc_angle_increment))
  lc_angle_degrees_r=$((lc_angle_degrees+lc_angle_increment))
  lc_angle_degrees_l=$((lc_angle_degrees-lc_angle_increment))
  lc_angle_radians_r=$(degrees_to_radions ${lc_angle_degrees_r})
  lc_angle_radians_l=$(degrees_to_radions ${lc_angle_degrees_l})
  lc_length=$((lc_length/2))

  xb=$(command printf "%.0f\n" $(bc -l <<< "${xa}+s(${lc_angle_radians_r})*${lc_length}"))
  yb=$(command printf "%.0f\n" $(bc -l <<< "${ya}+c(${lc_angle_radians_l})*${lc_length}"))
  draw_line $(rel_to_real ${xa}) ${ya} $(rel_to_real ${xb}) ${yb}
  draw_tree_recurse ${xb} ${yb} ${lc_length} $((lc_angle_degrees+lc_angle_increment)) ${lc_angle_increment} ${lc_iterations}

  xb=$(command printf "%.0f\n" $(bc -l <<< "${xa}-s(${lc_angle_radians})*${lc_length}"))
  yb=$(command printf "%.0f\n" $(bc -l <<< "${ya}+c(${lc_angle_radians})*${lc_length}"))
  draw_line $(rel_to_real ${xa}) ${ya} $(rel_to_real ${xb}) ${yb}
  draw_tree_recurse ${xb} ${yb} ${lc_length} $((lc_angle_degrees+lc_angle_increment)) ${lc_angle_increment} ${lc_iterations}

}
#[cf]
#[of]:function real_to_rel {
function real_to_rel {
  echo -n $(($1 * gl_aspect / 100))
}
#[cf]
#[of]:function rel_to_real {
function rel_to_real {
  echo -n $(($1 * 100 / gl_aspect))
}
#[cf]
#[cf]
#[cf]
#[of]:coordinate system plotters
#[of]:function adjust_aspect {
function adjust_aspect {
  gl_range_x=50
  gl_range_y=50

  mouseEnable
  while {
      clear

      graph_x_on_cartesian

      setcursorxy $((gl_width/2-5)) $((gl_height-3))
      echo -n "         "
      setcursorxy $((gl_width/2-5)) $((gl_height-3))
      printf "(%0.2f)" $(bc -l <<< "${gl_aspect}/100")

      read -s -N 1 -r _key
    } ; do
#[of]:    case "${_key}" in
    case "${_key}" in
#[of]:      escaped keys
      $'\E')
        read -s -N 2 -r -t .1 _key || {
#[of]:          esc
#[c]        esc itself is just a single char
#[c]        if read timeout is reached the key must be esc
        clear
        break
#[cf]
        }
        case "${_key}" in
#[of]:          mouse
            '[<')
              _mouse=""
              _mouseEvent=( _ _ _ _ _ )
              while read -s -n 1 -r _key ; do
                _mouse="${_mouse}${_key}"
                [[ "${_key}" =~ (M|m) ]] && break
              done
              [[ -z "${_mouse%%*M}" ]] && _mouseEvent[4]="down"
              [[ -z "${_mouse%%*m}" ]] && _mouseEvent[4]="up"
              _mouse="${_mouse:0:-1}"
              _mouseEvent=( ${_mouse//;/ } _ ${_mouseEvent[4]} )

              ##eat mouse button up
              [[ ! "${_mouseEvent[0]}" =~ (64|65) ]] && {
                read -s -N 1 -r _key
                while read -s -n 1 -r _key ; do
                  _mouse="${_mouse}${_key}"
                  [[ "${_key}" =~ (M|m) ]] && break
                done
                _mouseEvent[4]="up"
              }

#[c]              [[ "${_mouseEvent[0]}" == 0 ]] && _mouseEvent[3]="button_left"
#[c]              [[ "${_mouseEvent[0]}" == 1 ]] && _mouseEvent[3]="button_middle"
#[c]              [[ "${_mouseEvent[0]}" == 2 ]] && _mouseEvent[3]="button_right"

#[of]:              left button click
              [[ "${_mouseEvent[0]}" == 0 ]] && _mouseEvent[3]="button_left"
#[cf]
#[of]:              middle button click
              [[ "${_mouseEvent[0]}" == 1 ]] && _mouseEvent[3]="button_middle"
#[cf]
#[of]:              right button click
              if [[ "${_mouseEvent[0]}" == 2 && "${_mouseEvent[4]}" == "up" ]] ; then
                clear
                break
              fi
#[cf]

#[of]:              scroll up
              if [[ "${_mouseEvent[0]}" == 64 ]] ; then
                ((gl_aspect++))
              fi
#[cf]
#[of]:              scroll down
              if [[ "${_mouseEvent[0]}" == 65 ]] ; then
                ((gl_aspect--))
              fi
#[cf]
#[c]              echo "${_mouseEvent[@]}---mouse"
              ;;
#[cf]
#[of]:          up)
            '[A')
              ((gl_aspect++))
              ;;
#[cf]
#[of]:          down)
            '[B')
              ((gl_aspect--))
              ;;
#[cf]
        esac
        ;;
#[cf]
#[of]:      q)
      q)
        clear
        break
        ;;
#[cf]
    esac
#[cf]


    case "${_key}" in
      $'\E')
        read -s -N 2 -r -t 1 _key || {
#[of]:          esc
#[c]        esc itself is just a single char
#[c]        if read timeout is reached the key must be esc
        clear
        break
#[cf]
        }
        case "${_key}" in
#[of]:          up)
            '[A')
              ((gl_aspect++))
              ;;
#[cf]
#[of]:          down)
            '[B')
              ((gl_aspect--))
              ;;
#[cf]
        esac
        ;;
#[of]:      q)
      q)
        clear
        break
        ;;
#[cf]
    esac
  done
  mouseDisable
}
#[cf]
#[of]:function plot_cartesian {
function plot_cartesian {
  typeset _x _y

  _x=$(command printf "%.0f\n" $1)
  _y=$(command printf "%.0f\n" $2)
  
  _x=$(( gl_width / 2 + _x * gl_width * gl_aspect / gl_range_x / 2 / 100 ))
  _y=$(( gl_height / 2 + _y * gl_height / gl_range_y / 2 ))

  if [[ -z "${gl_lastx}" ]] ; then
    gl_lastx=${_x}
    gl_lasty=${_y}
  else
    draw_line ${gl_lastx} ${gl_lasty} ${_x} ${_y}
    gl_lastx=${_x}
    gl_lasty=${_y}
  fi
}
#[cf]
#[of]:function plot_polar {
function plot_polar {
  typeset lc_angle lc_radius _x _y
  lc_angle=$1
  lc_radius=$2
  _x=$(bc -l <<< "c(${lc_angle})*${lc_radius}")
  _y=$(bc -l <<< "s(${lc_angle})*${lc_radius}")
  plot_cartesian ${_x} ${_y}  
}
#[cf]
#[cf]
#[of]:graph functions
#[of]:function graph_x_on_cartesian {
function graph_x_on_cartesian {
  clear

  typeset i
  i=45
  reset_last_xy
  plot_cartesian 0 0
  plot_cartesian ${i} ${i}
  reset_last_xy
  plot_cartesian 0 0
  plot_cartesian -${i} ${i}
  reset_last_xy
  plot_cartesian 0 0
  plot_cartesian -${i} -${i}
  reset_last_xy
  plot_cartesian 0 0
  plot_cartesian ${i} -${i}
  screen_refresh
}
#[cf]
#[of]:function graph_polar_line {
function graph_polar_line {
  clear

  typeset lc_step lc_angle_degrees lc_angle_degrees_shifted lc_angle_radians lc_radius
  lc_step=.5

  gl_range_x=50
  gl_range_y=50

  reset_last_xy
  plot_cartesian -${gl_range_x} 0
  plot_cartesian ${gl_range_x} 0

  reset_last_xy
  plot_cartesian 0 -${gl_range_y}
  plot_cartesian  0 ${gl_range_y}

  reset_last_xy
  lc_angle_degrees=-${lc_step}
  while { lc_angle_degrees=$(bc -l <<< "${lc_angle_degrees}+${lc_step}");[[ $(bc -l <<< "${lc_angle_degrees} <=180") == 1 ]]; } ; do
    typeset lc_angle
    lc_angle_degrees_shifted=$(bc -l <<< "${lc_angle_degrees} - 90")
    lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
    lc_radius=$(bc -l <<< "1 / c( $(degrees_to_radions ${lc_angle_degrees_shifted}) ) * 10")

#[c]    echo "${lc_angle_degrees}, ${lc_angle_degrees_shifted}, ${lc_radius}"

    setcursorxy $((gl_width/2-5)) $((gl_height -2))
    echo -n "                                                      "
    setcursorxy $((gl_width/2-5)) $((gl_height -2))
    echo -n "${lc_angle_degrees}, ${lc_angle_radians}, ${lc_radius}"

    [[ $(bc -l <<< "${lc_radius} > ${gl_range_x}") == 1 ]] && continue
    plot_polar ${lc_angle_radians} ${lc_radius}
  done

  screen_refresh
}
#[cf]
#[of]:function graph_sinwave {
function graph_sinwave {
  typeset lc_angle_degrees lc_angle_degrees_shifted lc_angle_radians lc_radius
  typeset lc_frequency lc_magnitude lc_graphtype lc_step
  lc_frequency=1
  lc_magnitude=40
  lc_step=10
  lc_graphtype=1

  gl_range_x=100
  gl_range_y=50

  mouseEnable
  while {
      clear

      setcursorxy $((gl_width/2-5)) $((gl_height-1))
      echo -n "          "
      setcursorxy $((gl_width/2-5)) $((gl_height-1))
      echo -n "(${lc_frequency}, ${lc_step})"
      
      reset_last_xy
  #set -xv
      lc_angle_degrees=-${lc_step}
      while { lc_angle_degrees=$(bc -l <<< "${lc_angle_degrees}+${lc_step}");[[ $(bc -l <<< "${lc_angle_degrees} <=360") == 1 ]]; } ; do
        lc_angle_degrees_shifted=$(bc -l <<< "${lc_angle_degrees}-180")
        lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
        lc_radius=$(bc -l <<< "s(${lc_angle_radians}*${lc_frequency})*${lc_magnitude}")
    
        setcursorxy $((gl_width/2-5)) $((gl_height-2))
        echo -n "                          "
        setcursorxy $((gl_width/2-5)) $((gl_height-2))
        if ((lc_graphtype==1)) ; then
          printf "(%.3f,%.3f)" ${lc_angle_degrees_shifted} ${lc_radius}
          plot_cartesian ${lc_angle_degrees_shifted} ${lc_radius}
        else
          printf "(%.3f  %.3f,%.3f)" ${lc_angle_radians} ${lc_angle_degrees} ${lc_radius}
          plot_polar ${lc_angle_radians} ${lc_radius}
        fi
#[c]        pause
      done
      screen_refresh

      read -s -N 1 -r _key
    } ; do
#[of]:    case "${_key}" in
    case "${_key}" in
#[of]:      escaped keys
      $'\E')
        read -s -N 2 -r -t .1 _key || {
#[of]:          esc
#[c]        esc itself is just a single char
#[c]        if read timeout is reached the key must be esc
        clear
        break
#[cf]
        }
        case "${_key}" in
#[of]:          mouse
            '[<')
              _mouse=""
              _mouseEvent=( _ _ _ _ _ )
              while read -s -n 1 -r _key ; do
                _mouse="${_mouse}${_key}"
                [[ "${_key}" =~ (M|m) ]] && break
              done
              [[ -z "${_mouse%%*M}" ]] && _mouseEvent[4]="down"
              [[ -z "${_mouse%%*m}" ]] && _mouseEvent[4]="up"
              _mouse="${_mouse:0:-1}"
              _mouseEvent=( ${_mouse//;/ } _ ${_mouseEvent[4]} )

              ##eat mouse button up
              [[ ! "${_mouseEvent[0]}" =~ (64|65) ]] && {
                read -s -N 1 -r _key
                while read -s -n 1 -r _key ; do
                  _mouse="${_mouse}${_key}"
                  [[ "${_key}" =~ (M|m) ]] && break
                done
                _mouseEvent[4]="up"
              }

#[c]              [[ "${_mouseEvent[0]}" == 0 ]] && _mouseEvent[3]="button_left"
#[c]              [[ "${_mouseEvent[0]}" == 1 ]] && _mouseEvent[3]="button_middle"
#[c]              [[ "${_mouseEvent[0]}" == 2 ]] && _mouseEvent[3]="button_right"

#[of]:              left button click
              if [[ "${_mouseEvent[0]}" == 0 && "${_mouseEvent[4]}" == "up" ]] ; then
                if [[ $(bc -l <<< "${lc_step} > 1") == 1 ]] ; then
                  ((lc_step--))
                elif [[ $(bc -l <<< "${lc_step} > .1") == 1 ]] ; then
                  lc_step=$(bc -l <<< "${lc_step}-.1")
                fi
              fi
#[cf]
#[of]:              middle button click
              if [[ "${_mouseEvent[0]}" == 1 && "${_mouseEvent[4]}" == "up" ]] ; then
                if ((lc_graphtype==1)) ; then
                  lc_graphtype=2
                  gl_range_x=50
                  gl_range_y=50
                else
                  lc_graphtype=1
                  gl_range_x=100
                  gl_range_y=50
                fi
              fi
#[cf]
#[of]:              right button click
              if [[ "${_mouseEvent[0]}" == 2 && "${_mouseEvent[4]}" == "up" ]] ; then
                if [[ $(bc -l <<< "${lc_step} >= 1") == 1 ]] ; then
                  lc_step=$(command printf "%.0f\n" ${lc_step})
                  ((lc_step++))
                else
                  lc_step=$(bc -l <<< "${lc_step}+.1")
                fi
              fi
#[cf]

#[of]:              scroll up
              if [[ "${_mouseEvent[0]}" == 64 ]] ; then
                ((lc_frequency++))
              fi
#[cf]
#[of]:              scroll down
              if [[ "${_mouseEvent[0]}" == 65 ]] ; then
                ((lc_frequency--))
              fi
#[cf]
#[c]              echo "${_mouseEvent[@]}---mouse"
              ;;
#[cf]
#[of]:          up)
            '[A')
              ((lc_frequency++))
              ;;
#[cf]
#[of]:          down)
            '[B')
              ((lc_frequency--))
              ;;
#[cf]
#[of]:          left)
            '[D')
              if [[ $(bc -l <<< "${lc_step} > 1") == 1 ]] ; then
                ((lc_step--))
              elif [[ $(bc -l <<< "${lc_step} > .1") == 1 ]] ; then
                lc_step=$(bc -l <<< "${lc_step}-.1")
              fi
              ;;
#[cf]
#[of]:          right)
            '[C')
              if [[ $(bc -l <<< "${lc_step} >= 1") == 1 ]] ; then
                lc_step=$(command printf "%.0f\n" ${lc_step})
                ((lc_step++))
              else
                lc_step=$(bc -l <<< "${lc_step}+.1")
              fi
              ;;
#[cf]
        esac
        ;;
#[cf]
#[of]:      g)
      g)
        if ((lc_graphtype==1)) ; then
          lc_graphtype=2
          gl_range_x=50
          gl_range_y=50
        else
          lc_graphtype=1
          gl_range_x=100
          gl_range_y=50
        fi
        ;;
#[cf]
#[of]:      q)
      q)
        clear
        break
        ;;
#[cf]
    esac
#[cf]
  done
  mouseDisable
}
#[cf]
#[of]:function graph_circle_triangle {
function graph_circle_triangle {
  typeset lc_angle_degrees lc_angle_degrees_shifted lc_angle_radians lc_radius
  typeset lc_frequency lc_magnitude lc_graphtype lc_step
  
  typeset _x _y lc_lastx lc_lasty
  typeset lc_current_angle

  typeset lc_current_buffered_state
  lc_current_buffered_state=${gl_screen_buffered}

  gl_screen_buffered=true
  setup_screen_core_functions
  
  
  lc_frequency=1
  lc_magnitude=44
  lc_step=10
  lc_graphtype=1

  gl_range_x=50
  gl_range_y=50


  clear
  write_pre-render
  screen_refresh

  clear
  if ${gl_screen_buffered} ; then
    reset_last_xy
    lc_angle_degrees=-${lc_step}
    while { lc_angle_degrees=$(bc -l <<< "${lc_angle_degrees}+${lc_step}");[[ $(bc -l <<< "${lc_angle_degrees} <=360") == 1 ]]; } ; do
      lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
      plot_polar ${lc_angle_radians} ${lc_magnitude}
    done
    screen_save
  fi

  lc_current_angle=40
  mouseEnable
  while {
      clear
      screen_restore

      if ! ${gl_screen_buffered} ; then
        reset_last_xy
        lc_angle_degrees=-${lc_step}
        while { lc_angle_degrees=$(bc -l <<< "${lc_angle_degrees}+${lc_step}");[[ $(bc -l <<< "${lc_angle_degrees} <=360") == 1 ]]; } ; do
          lc_angle_radians=$(degrees_to_radions ${lc_angle_degrees})
          plot_polar ${lc_angle_radians} ${lc_magnitude}
        done
      fi

      reset_last_xy
      lc_angle_radians=$(degrees_to_radions ${lc_current_angle})
      _x=$(bc -l <<< "c(${lc_angle_radians})*${lc_magnitude}")
      _y=$(bc -l <<< "s(${lc_angle_radians})*${lc_magnitude}")
      plot_cartesian 0 0
      plot_cartesian ${_x} ${_y}
      plot_cartesian ${_x} 0
      plot_cartesian 0 0

      setcursorxy $((gl_width/2-5)) $((gl_height-1))
      echo -n "                          "
      setcursorxy $((gl_width/2-5)) $((gl_height-1))
      printf "(%.3f, %.3f, %.3f)" ${lc_current_angle} ${_x} ${_y}

      screen_refresh

      read -s -N 1 -r _key
    } ; do
#[of]:    case "${_key}" in
    case "${_key}" in
#[of]:      escaped keys
      $'\E')
        read -s -N 2 -r -t .1 _key || {
#[of]:          esc
#[c]        esc itself is just a single char
#[c]        if read timeout is reached the key must be esc
        clear
        break
#[cf]
        }
        case "${_key}" in
#[of]:          mouse
            '[<')
              _mouse=""
              _mouseEvent=( _ _ _ _ _ )
              while read -s -n 1 -r _key ; do
                _mouse="${_mouse}${_key}"
                [[ "${_key}" =~ (M|m) ]] && break
              done
              [[ -z "${_mouse%%*M}" ]] && _mouseEvent[4]="down"
              [[ -z "${_mouse%%*m}" ]] && _mouseEvent[4]="up"
              _mouse="${_mouse:0:-1}"
              _mouseEvent=( ${_mouse//;/ } _ ${_mouseEvent[4]} )

              ##eat mouse button up
              [[ ! "${_mouseEvent[0]}" =~ (64|65) ]] && {
                read -s -N 1 -r _key
                while read -s -n 1 -r _key ; do
                  _mouse="${_mouse}${_key}"
                  [[ "${_key}" =~ (M|m) ]] && break
                done
                _mouseEvent[4]="up"
              }

#[c]              [[ "${_mouseEvent[0]}" == 0 ]] && _mouseEvent[3]="button_left"
#[c]              [[ "${_mouseEvent[0]}" == 1 ]] && _mouseEvent[3]="button_middle"
#[c]              [[ "${_mouseEvent[0]}" == 2 ]] && _mouseEvent[3]="button_right"

#[of]:              left button click
              [[ "${_mouseEvent[0]}" == 0 ]] && _mouseEvent[3]="button_left"
#[cf]
#[of]:              middle button click
              [[ "${_mouseEvent[0]}" == 1 ]] && _mouseEvent[3]="button_middle"
#[cf]
#[of]:              right button click
              if [[ "${_mouseEvent[0]}" == 2 && "${_mouseEvent[4]}" == "up" ]] ; then
                clear
                break
              fi
#[cf]

#[of]:              scroll up
              if [[ "${_mouseEvent[0]}" == 64 ]] ; then
                if [[ ${lc_current_angle} != 350 ]] ; then
                  ((lc_current_angle+=10))
                else
                  lc_current_angle=0
                fi
              fi
#[cf]
#[of]:              scroll down
              if [[ "${_mouseEvent[0]}" == 65 ]] ; then
                if [[ ${lc_current_angle} != 0 ]] ; then
                  ((lc_current_angle-=10))
                else
                  lc_current_angle=350
                fi
              fi
#[cf]
#[c]              echo "${_mouseEvent[@]}---mouse"
              ;;
#[cf]
#[of]:          left)
            '[D')
              if [[ ${lc_current_angle} != 350 ]] ; then
                ((lc_current_angle+=10))
              else
                lc_current_angle=0
              fi
              ;;
#[cf]
#[of]:          right)
            '[C')
              if [[ ${lc_current_angle} != 0 ]] ; then
                ((lc_current_angle-=10))
              else
                lc_current_angle=350
              fi
              ;;
#[cf]
        esac
        ;;
#[cf]
#[of]:      q)
      q)
        clear
        break
        ;;
#[cf]
    esac
#[cf]
  done
  mouseDisable

  gl_screen_buffered=${lc_current_buffered_state}
  setup_screen_core_functions
}
#[cf]
#[of]:function graph_square {
function graph_square {
  clear

  gl_range_x=50
  gl_range_y=50

  reset_last_xy
  plot_cartesian -20 20
  plot_cartesian  20 20
  plot_cartesian  20 -20
  plot_cartesian -20 -20
  plot_cartesian -20 20
  screen_refresh
}
#[cf]
#[of]:function graph_triangle {
function graph_triangle {
  clear

  gl_range_x=50
  gl_range_y=50

  reset_last_xy
  gl_triangle_height=$(bc -l <<< "s( $(degrees_to_radions 60) )*40")
  plot_cartesian -20 $(bc -l <<< "-${gl_triangle_height}/2")
  plot_cartesian 20 $(bc -l <<< "-${gl_triangle_height}/2")
  plot_cartesian 0 $(bc -l <<< "${gl_triangle_height}-${gl_triangle_height}/2")
  plot_cartesian -20 $(bc -l <<< "-${gl_triangle_height}/2")
  screen_refresh
}
#[cf]
#[cf]
#[cf]
#[of]:setup vars
calcscreensize
gl_position=( 0 0 )
gl_range_x=50
gl_range_y=50

gl_lastx=""
gl_lasty=""

gl_aspect=50
gl_pi=$(command echo "scale=10; 4*a(1)" | bc -l)

gl_screen_buffered=false

#[of]:create blank row
for ((_x=0;_x<=gl_width;_x++)) ; do
  gl_xb+=(' ')
done
#[cf]


#[cf]
#[of]:main
setup_screen_core_functions

if [[ "$1" == "-a" ]] ; then
  adjust_aspect
  exit
fi

draw_test_edges
write_done

draw_test_lines

graph_triangle
write_done

graph_square
write_done

#[c]graph_polar_line
#[c]write_done

graph_circle_triangle

graph_sinwave

#[c]draw_tree
#[c]write_done

#[c]clear

#[cf]
# vim:number:tabstop=2:shiftwidth=2:autoindent:foldmethod=marker:foldlevel=0:foldmarker=#[of],#[cf]
